// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nf2Nv99ueYinsR5xWJBp2w
// Component: VGRHqtCqGC
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: PbDjoXhf3g3/component
import Button from "../../Button"; // plasmic-import: KCgaob0IFeF/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_ratecare.module.css"; // plasmic-import: nf2Nv99ueYinsR5xWJBp2w/projectcss
import sty from "./PlasmicAuthComponent.module.css"; // plasmic-import: VGRHqtCqGC/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: YZLiCGN0Fpw/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: Du4cwiOcxnd/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: hA-Xnujtaul/icon
import LoaderIcon from "./icons/PlasmicIcon__Loader"; // plasmic-import: Gtp4Q93f_/icon

export type PlasmicAuthComponent__VariantMembers = {
  isSignUpFlow: "isSignUpFlow";
  isError: "isError";
  isLoading: "isLoading";
};

export type PlasmicAuthComponent__VariantsArgs = {
  isSignUpFlow?: SingleBooleanChoiceArg<"isSignUpFlow">;
  isError?: SingleBooleanChoiceArg<"isError">;
  isLoading?: SingleBooleanChoiceArg<"isLoading">;
};

type VariantPropType = keyof PlasmicAuthComponent__VariantsArgs;
export const PlasmicAuthComponent__VariantProps = new Array<VariantPropType>(
  "isSignUpFlow",
  "isError",
  "isLoading"
);

export type PlasmicAuthComponent__ArgsType = {
  errorMessage?: React.ReactNode;
  errorrMessage?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAuthComponent__ArgsType;
export const PlasmicAuthComponent__ArgProps = new Array<ArgPropType>(
  "errorMessage",
  "errorrMessage"
);

export type PlasmicAuthComponent__OverridesType = {
  root?: p.Flex<"div">;
  emailInput?: p.Flex<typeof TextInput>;
  passwordInput?: p.Flex<typeof TextInput>;
  submitButton?: p.Flex<typeof Button>;
  button?: p.Flex<typeof Button>;
};

export interface DefaultAuthComponentProps {
  errorMessage?: React.ReactNode;
  errorrMessage?: React.ReactNode;
  isSignUpFlow?: SingleBooleanChoiceArg<"isSignUpFlow">;
  isError?: SingleBooleanChoiceArg<"isError">;
  isLoading?: SingleBooleanChoiceArg<"isLoading">;
  className?: string;
}

function PlasmicAuthComponent__RenderFunc(props: {
  variants: PlasmicAuthComponent__VariantsArgs;
  args: PlasmicAuthComponent__ArgsType;
  overrides: PlasmicAuthComponent__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootisError]: hasVariant(variants, "isError", "isError"),
          [sty.rootisLoading]: hasVariant(variants, "isLoading", "isLoading"),
          [sty.rootisSignUpFlow]: hasVariant(
            variants,
            "isSignUpFlow",
            "isSignUpFlow"
          )
        }
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__yyRu3
        )}
      >
        {"Ratecare"}
      </div>

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__ynoVb)}>
          {p.renderPlasmicSlot({
            defaultContents: "Error text goes here",
            value: args.errorMessage,
            className: classNames(sty.slotTargetErrorMessage)
          })}
        </div>
      ) : null}
      {(hasVariant(variants, "isError", "isError") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__krbAo, {
            [sty.freeBoxisError__krbAoXdcBn]: hasVariant(
              variants,
              "isError",
              "isError"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Error text goes here",
            value: args.errorrMessage,
            className: classNames(sty.slotTargetErrorrMessage, {
              [sty.slotTargetErrorrMessageisError]: hasVariant(
                variants,
                "isError",
                "isError"
              )
            })
          })}
        </div>
      ) : null}

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___8Rops,
          {
            [sty.textisError___8RopsXdcBn]: hasVariant(
              variants,
              "isError",
              "isError"
            )
          }
        )}
      >
        {"Email"}
      </div>

      <TextInput
        data-plasmic-name={"emailInput"}
        data-plasmic-override={overrides.emailInput}
        className={classNames("__wab_instance", sty.emailInput)}
        placeholder={"Email" as const}
      />

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__n8W9N
        )}
      >
        {"Password"}
      </div>

      <TextInput
        data-plasmic-name={"passwordInput"}
        data-plasmic-override={overrides.passwordInput}
        className={classNames("__wab_instance", sty.passwordInput)}
        placeholder={"Password" as const}
      />

      {(hasVariant(variants, "isLoading", "isLoading") ? true : true) ? (
        <Button
          data-plasmic-name={"submitButton"}
          data-plasmic-override={overrides.submitButton}
          className={classNames("__wab_instance", sty.submitButton, {
            [sty.submitButtonisLoading]: hasVariant(
              variants,
              "isLoading",
              "isLoading"
            ),
            [sty.submitButtonisSignUpFlow]: hasVariant(
              variants,
              "isSignUpFlow",
              "isSignUpFlow"
            )
          })}
          color={"green" as const}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__urhSy,
              {
                [sty.textisSignUpFlow__urhSyxTuYh]: hasVariant(
                  variants,
                  "isSignUpFlow",
                  "isSignUpFlow"
                )
              }
            )}
          >
            {hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
              ? "SignUp"
              : "Login"}
          </div>
        </Button>
      ) : null}

      <div
        className={classNames(projectcss.all, sty.freeBox__a84WR, {
          [sty.freeBoxisLoading__a84WRgfbth]: hasVariant(
            variants,
            "isLoading",
            "isLoading"
          ),
          [sty.freeBoxisSignUpFlow__a84WRxTuYh]: hasVariant(
            variants,
            "isSignUpFlow",
            "isSignUpFlow"
          )
        })}
      >
        {true ? (
          <LoaderIcon
            className={classNames(projectcss.all, sty.svg___3HTsY)}
            role={"img"}
          />
        ) : null}
        {(hasVariant(variants, "isLoading", "isLoading") ? true : true) ? (
          <LoaderIcon
            className={classNames(projectcss.all, sty.svg__lkVbp, {
              [sty.svgisLoading__lkVbpgfbth]: hasVariant(
                variants,
                "isLoading",
                "isLoading"
              )
            })}
            role={"img"}
          />
        ) : null}

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vcR2Z,
            {
              [sty.textisSignUpFlow__vcR2ZXTuYh]: hasVariant(
                variants,
                "isSignUpFlow",
                "isSignUpFlow"
              )
            }
          )}
        >
          {hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
            ? "Already have an account?"
            : "Don't have an account?"}
        </div>

        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button, {
            [sty.buttonisSignUpFlow]: hasVariant(
              variants,
              "isSignUpFlow",
              "isSignUpFlow"
            )
          })}
          color={"link" as const}
          link={`/signup`}
        >
          {hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
            ? "SignIn"
            : "Sign Up"}
        </Button>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "emailInput", "passwordInput", "submitButton", "button"],
  emailInput: ["emailInput"],
  passwordInput: ["passwordInput"],
  submitButton: ["submitButton"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  emailInput: typeof TextInput;
  passwordInput: typeof TextInput;
  submitButton: typeof Button;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAuthComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAuthComponent__VariantsArgs;
    args?: PlasmicAuthComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAuthComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAuthComponent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAuthComponent__ArgProps,
          internalVariantPropNames: PlasmicAuthComponent__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAuthComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAuthComponent";
  } else {
    func.displayName = `PlasmicAuthComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicAuthComponent = Object.assign(
  // Top-level PlasmicAuthComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    emailInput: makeNodeComponent("emailInput"),
    passwordInput: makeNodeComponent("passwordInput"),
    submitButton: makeNodeComponent("submitButton"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicAuthComponent
    internalVariantProps: PlasmicAuthComponent__VariantProps,
    internalArgProps: PlasmicAuthComponent__ArgProps
  }
);

export default PlasmicAuthComponent;
/* prettier-ignore-end */
